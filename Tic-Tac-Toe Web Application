<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tic-Tac-Toe</title>
  <style>
    body {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100vh;
      font-family: Arial, sans-serif;
      background: linear-gradient(135deg, #ff9a9e, #fad0c4);
      margin: 0;
    }

    h1 {
      margin-bottom: 20px;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 5px;
    }

    .cell {
      width: 100px;
      height: 100px;
      background: #fff;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 2.5rem;
      cursor: pointer;
      border-radius: 10px;
      transition: background 0.3s;
    }

    .cell:hover {
      background: #f1f1f1;
    }

    .cell.taken {
      cursor: not-allowed;
    }

    .status {
      margin-top: 20px;
      font-size: 1.2rem;
      font-weight: bold;
    }

    button {
      margin-top: 15px;
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      background: #333;
      color: #fff;
      cursor: pointer;
      font-size: 1rem;
      transition: background 0.3s;
    }

    button:hover {
      background: #444;
    }
  </style>
</head>
<body>
  <h1>🎮 Tic-Tac-Toe</h1>
  <div class="board" id="board"></div>
  <div class="status" id="status">Player X's turn</div>
  <button onclick="resetGame()">Restart Game</button>

  <script>
    const board = document.getElementById("board");
    const statusText = document.getElementById("status");
    let cells = [];
    let currentPlayer = "X";
    let gameActive = true;

    // Winning combinations
    const winCombos = [
      [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
      [0, 3, 6], [1, 4, 7], [2, 5, 8], // cols
      [0, 4, 8], [2, 4, 6]              // diagonals
    ];

    // Create board
    function createBoard() {
      board.innerHTML = "";
      cells = [];
      for (let i = 0; i < 9; i++) {
        const cell = document.createElement("div");
        cell.classList.add("cell");
        cell.addEventListener("click", () => handleClick(i));
        board.appendChild(cell);
        cells.push(cell);
      }
    }

    // Handle cell click
    function handleClick(index) {
      if (!gameActive || cells[index].textContent !== "") return;

      cells[index].textContent = currentPlayer;
      cells[index].classList.add("taken");

      if (checkWin(currentPlayer)) {
        statusText.textContent = `🎉 Player ${currentPlayer} wins!`;
        gameActive = false;
        return;
      }

      if (isDraw()) {
        statusText.textContent = "🤝 It's a draw!";
        gameActive = false;
        return;
      }

      currentPlayer = currentPlayer === "X" ? "O" : "X";
      statusText.textContent = `Player ${currentPlayer}'s turn`;
    }

    // Check win
    function checkWin(player) {
      return winCombos.some(combo =>
        combo.every(index => cells[index].textContent === player)
      );
    }

    // Check draw
    function isDraw() {
      return cells.every(cell => cell.textContent !== "");
    }

    // Reset game
    function resetGame() {
      currentPlayer = "X";
      gameActive = true;
      statusText.textContent = "Player X's turn";
      createBoard();
    }

    // Initialize game
    createBoard();
  </script>
</body>
</html>

